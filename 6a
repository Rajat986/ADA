#include<stdio.h>
#include<time.h>
typedef struct edge
{
        int src,des,w;
}edge;

typedef struct edgelist
{
        int n;
        edge data[100];
}edgelist;

edgelist elist;

edgelist spanlist;

void main()
{
        clock_t start,end,tt;
        start=clock();
        void kruskal();
        void print();

        int i,j,total_cost,n;

        printf("\nEnter number of vertices:");
        scanf("%d",&n);
        int G[n][n];

yo:     printf("\nEnter the adjacency matrix:\n");

        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        scanf("%d",&G[i][j]);
                }
                printf("\n");
        }

        printf("The adjacentcy matrix is:\n");
        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        printf("%d ",G[i][j]);
                }
                printf("\n");
        }
        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        if(G[i][j] != G[j][i])
                        {
                                printf("The adjacency matrix is not symmetric!!!\n");
                                goto yo;
                        }
                }
                printf("\n");
        }


        kruskal(n,G);
        print();
        end=clock();
        tt=(double)(end-start);
        printf("Start: %ld\nEnd: %ld\nTotal Time: %ld\n",start,end,tt);
}

void kruskal(int n,int G[n][n])
{
        void sort();
        int find(int [],int);
        void union1(int,int [],int,int );

        int belongs[n],i,j,cno1,cno2;
        elist.n=0;

        for(i=0;i<n;i++)
                for(j=0;j<i;j++)
                {
                        if(G[i][j]!=0)
                        {
                                elist.data[elist.n].src=i;
                                elist.data[elist.n].des=j;
                                elist.data[elist.n].w=G[i][j];
                                elist.n++;
                        }
                }

        sort();

        for(i=0;i<n;i++)
                belongs[i]=i;

        spanlist.n=0;

        for(i=0;i<elist.n;i++)
        {
                cno1=find(belongs,elist.data[i].src);
                cno2=find(belongs,elist.data[i].des);

                if(cno1!=cno2)
                {
                        spanlist.data[spanlist.n]=elist.data[i];
                        spanlist.n=spanlist.n+1;
                        union1(n,belongs,cno1,cno2);
                }
        }
}

int find(int belongs[],int vertexno)
{
        return(belongs[vertexno]);
}

void union1(int n,int belongs[],int c1,int c2)
{
        int i;

        for(i=0;i<n;i++)
                if(belongs[i]==c2)
                        belongs[i]=c1;
}

void sort()
{
        int i,j;
        edge temp;
        for(i=0;i<elist.n;i++)
                for(j=0;j<elist.n-1;j++)
                        if(elist.data[j].w>elist.data[j+1].w)
                        {
                                temp=elist.data[j];
                                elist.data[j]=elist.data[j+1];
                                elist.data[j+1]=temp;
                        }
}

void print()
{
        int i,cost=0;
        printf("Src\tDes\tWeight\n");
        for(i=0;i<spanlist.n;i++)
        {
                printf("\n%d\t%d\t%d",spanlist.data[i].src,spanlist.data[i].des,spanlist.data[i].w);
                cost=cost+spanlist.data[i].w;
        }

        printf("\n\nCost of the spanning tree=%d\n",cost);
}

Input:
    Enter number of vertices:6

    Enter the adjacency matrix:
    0 3 1 6 0 0

    3 0 5 0 3 0 

    1 5 0 5 6 4 

    6 0 5 0 0 2

    0 3 6 0 0 6 

    0 0 4 2 6 0
  Output:
    The adjacentcy matrix is:
    0 3 1 6 0 0 
    3 0 5 0 3 0 
    1 5 0 5 6 4 
    6 0 5 0 0 2 
    0 3 6 0 0 6 
    0 0 4 2 6 0 

    Src	Des	Weight
    2	  0	  1
    5	  3	  2
    1	  0	  3
    4	  1	  3
    5	  2	  4

    Cost of the spanning tree=13
