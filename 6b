
#include<stdio.h>
#include<stdlib.h>
#define infinity 999
#define MAX 20
int spanning[MAX][MAX];

void main()
{
        int prims();

        int i,j,total_cost, n;
        printf("Enter no. of vertices:");
        scanf("%d",&n);

        int G[n][n];

        printf("\nEnter adjacency matrix:\n");
        for(i=0;i<n;i++)
                for(j=0;j<n;j++)
                        scanf("%d",&G[i][j]);

        printf("\nThe adjacency matrix is:\n");
        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        printf("%d ", G[i][j]);
                }
                printf("\n");
        }


        total_cost=prims(n,G);
        printf("\nspanning tree matrix:\n");

        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        printf("%d ",spanning[i][j]);
                }
                printf("\n");
        }

        printf("\n\nTotal cost of spanning tree=%d \n",total_cost);
}

int prims(int n, int G[n][n])
{
        int cost[n][n];
        int u,v,min_distance,distance[n],from[n];
        int visited[n],no_of_edges,i,min_cost,j;

        for(i=0;i<n;i++)
                for(j=0;j<n;j++)
                {
                        if(G[i][j]==0)
                                cost[i][j]=infinity;
                        else
                                cost[i][j]=G[i][j];
                                spanning[i][j]=0;
                }

        distance[0]=0;
        visited[0]=1;


        for(i=1;i<n;i++)
        {
                distance[i]=cost[0][i];
                from[i]=0;
                visited[i]=0;
        }

        min_cost=0;
        no_of_edges=n-1;

        while(no_of_edges>0)
        {
                min_distance=infinity;
                for(i=1;i<n;i++)
                        if(visited[i]==0&&distance[i]<min_distance)
                        {
                                v=i;
                                min_distance=distance[i];
                        }

                u=from[v];
                spanning[u][v]=distance[v];
                spanning[v][u]=distance[v];
                no_of_edges--;
                visited[v]=1;

                for(i=1;i<n;i++)
                        if(visited[i]==0&&cost[i][v]<distance[i])
                        {
                                distance[i]=cost[i][v];
                                from[i]=v;
                        }

                min_cost=min_cost+cost[u][v];
        }

        return(min_cost);
}

Input:
    Enter no. of vertices:6

    Enter adjacency matrix:
    0 3 1 6 0 0
    3 0 5 0 3 0
    1 5 0 5 6 4
    6 0 5 0 0 2
    0 3 6 0 0 6
    0 0 4 2 6 0
    
  Output:
    The adjacency matrix is:
    0 3 1 6 0 0 
    3 0 5 0 3 0 
    1 5 0 5 6 4 
    6 0 5 0 0 2 
    0 3 6 0 0 6 
    0 0 4 2 6 0 

    spanning tree matrix:
    0 3 1 0 0 0 
    3 0 0 0 3 0 
    1 0 0 0 0 4 
    0 0 0 0 0 2 
    0 3 0 0 0 0 
    0 0 4 2 0 0 

    Total cost of spanning tree=13
