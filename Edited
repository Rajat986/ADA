#include <stdio.h>

#define SIZE 5

//the maze problem

//matrix to store the solution


//function to print the solution matrix
void printsolution(int solution[SIZE][SIZE])
{
    int i,j;
    for(i=0;i<SIZE;i++)
    {
        for(j=0;j<SIZE;j++)
        {
            printf("%d ",solution[i][j]);
        }
        printf("\n");
    }
}

//function to solve the maze
//using backtracking
int solvemaze(int r, int c,int maze[SIZE][SIZE],int solution[SIZE][SIZE])
{
    //if destination is reached, maze is solved
    //destination is the last cell(maze[SIZE-1][SIZE-1])
    if((r==SIZE-1) && (c==SIZE-1))
    {
        solution[r][c] = 1;
        return 1;
    }
    //checking if we can visit in this cell or not
    //the indices of the cell must be in (0,SIZE-1)
    //and solution[r][c] == 0 is making sure that the cell is not already visited
    //maze[r][c] == 0 is making sure that the cell is not blocked
    if(r>=0 && c>=0 && r<SIZE && c<SIZE && solution[r][c] == 0 && maze[r][c] == 0)
    {
        //if safe to visit then visit the cell
        solution[r][c] = 1;
        //going down
        if(solvemaze(r+1, c,maze,solution))
            return 1;
        //going right
        if(solvemaze(r, c+1,maze,solution))
            return 1;
        //going up
        if(solvemaze(r-1, c,maze,solution))
            return 1;
        //going left
        if(solvemaze(r, c-1,maze,solution))
            return 1;
        //backtracking
        solution[r][c] = 0;
        return 0;
    }
    return 0;

}

void main()
{
    //making all elements of the solution matrix 0
    	int i,j;
yyo:	printf("Enter maze[Use only 0 or 1 | 1 are the blocks]:\n");
	int maze[SIZE][SIZE],solution[SIZE][SIZE];
        for(int i=0;i<SIZE;i++)
                for(int j=0;j<SIZE;j++)
                {
                        printf("maze[%d][%d]: ",i+1,j+1);
                        scanf("%d",&maze[i][j]);
                }
yo:	printf("\nThe maze is:\n");
	for(i=0;i<SIZE;i++)
	{
		for(j=0;j<SIZE;j++)
		{
			printf("%d ",maze[i][j]);
		}
		printf("\n");
	}
	if(maze[SIZE-1][SIZE-1] == 1)
	{
		maze[SIZE-1][SIZE-1] = 0;
		printf("Destination cannot be '1', converting it to 0!!!\n");
		goto yo;
	}


    for(i=0; i<SIZE; i++)
    {
        for(j=0; j<SIZE; j++)
        {
            solution[i][j] = 0;
        }
    }
    	if (solvemaze(0,0,maze,solution))
	{
		printf("\nThe solution is:\n");
        	printsolution(solution);
	}
    	else
        	printf("No solution\n");
}
